{"version":3,"sources":["../../src/Dropdown/index.js"],"names":["MtWrapper","Dropdown","onClick","props","key","options","trigger","children","type","label","placement","overlay","Array","el","dropdownRef","propTypes","any","isRequired","string","node","func","getPopupContainer","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA;AAAA;AAAA;AAAA,6BAAN;;IAIMC,Q;;;;;;;;;;;;;;gNAiBJC,O,GAAU,eAAO;AACf,UAAI,MAAKC,KAAL,CAAWD,OAAf,EAAwB;AACtB,cAAKC,KAAL,CAAWD,OAAX,CAAmBE,GAAnB;AACD;AACF,K;;;;;6BAEQ;AAAA;;AAAA,mBASH,KAAKD,KATF;AAAA,UAELE,OAFK,UAELA,OAFK;AAAA,UAGLC,OAHK,UAGLA,OAHK;AAAA,UAILC,QAJK,UAILA,QAJK;AAAA,UAKLC,IALK,UAKLA,IALK;AAAA,UAMLC,KANK,UAMLA,KANK;AAAA,UAOLP,OAPK,UAOLA,OAPK;AAAA,UAQLQ,SARK,UAQLA,SARK;;AAUP,UAAIC,gBAAJ;AACA,UAAIN,mBAAmBO,KAAvB,EAA8B;AAC5BD,kBAAU,gDAAM,SAASN,OAAf,EAAwB,SAAS,KAAKH,OAAtC,GAAV;AACD,OAFD,MAEO;AACLS,kBAAUN,OAAV;AACD;AACD,UAAIG,SAAS,QAAb,EAAuB;AACrBD,mBAAW;AAAA;AAAA;AAASE,mBAAS;AAAlB,SAAX;AACD;;AAED,aACE;AAAC,iBAAD;AAAA;AACE,oBAAU,sBAAM;AACd,gBAAII,EAAJ,EAAQ;AACN,qBAAKC,WAAL,GAAmBD,EAAnB;AACD;AACF;AALH;AAOE;AAAA;AAAA;AACE,qBAASF,OADX;AAEE,qBAAS,CAACL,OAAD,CAFX;AAGE,uBAAW,cAHb;AAIE,qBAASJ,OAJX;AAKE,+BAAmB,6BAAM;AACvB,qBAAO,OAAKY,WAAZ;AACD,aAPH;AAQE,uBAAWJ;AARb;AAUE;AAAA;AAAA;AAAA;AAAOH,oBAAP;AAAA;AAAA;AAVF;AAPF,OADF;AAsBD;;;;;AAjEGN,Q,CACGc,S,GAAY;AACjBV,WAAS,oBAAUW,GAAV,CAAcC,UADN;AAEjBX,WAAS,oBAAUY,MAFF;AAGjBX,YAAU,oBAAUY,IAHH;AAIjBjB,WAAS,oBAAUkB,IAJF;AAKjBZ,QAAM,oBAAUU,MALC;AAMjBT,SAAO,oBAAUS,MANA;AAOjBG,qBAAmB,oBAAUD,IAPZ;AAQjBV,aAAW,oBAAUQ;AARJ,C;AADfjB,Q,CAYGqB,Y,GAAe;AACpBhB,WAAS,OADW;AAEpBI,aAAW;AAFS,C;kBAuDTT,Q","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport AntDropdown from 'antd/lib/dropdown';\nimport Menu from '../Menu';\nimport 'antd/lib/dropdown/style/index.css';\nimport Button from 'antd/lib/button';\nimport styled from 'styled-components';\nimport 'antd/lib/button/style/index.css';\n\nconst MtWrapper = styled.div`\n  display: inline-block;\n`;\n\nclass Dropdown extends Component {\n  static propTypes = {\n    options: PropTypes.any.isRequired,\n    trigger: PropTypes.string,\n    children: PropTypes.node,\n    onClick: PropTypes.func,\n    type: PropTypes.string,\n    label: PropTypes.string,\n    getPopupContainer: PropTypes.func,\n    placement: PropTypes.string\n  };\n\n  static defaultProps = {\n    trigger: 'hover',\n    placement: 'bottomRight'\n  };\n\n  onClick = key => {\n    if (this.props.onClick) {\n      this.props.onClick(key);\n    }\n  };\n\n  render() {\n    let {\n      options,\n      trigger,\n      children,\n      type,\n      label,\n      onClick,\n      placement\n    } = this.props;\n    let overlay;\n    if (options instanceof Array) {\n      overlay = <Menu options={options} onClick={this.onClick} />;\n    } else {\n      overlay = options;\n    }\n    if (type === 'button') {\n      children = <Button>{label || 'Button'}</Button>;\n    }\n\n    return (\n      <MtWrapper\n        innerRef={el => {\n          if (el) {\n            this.dropdownRef = el;\n          }\n        }}\n      >\n        <AntDropdown\n          overlay={overlay}\n          trigger={[trigger]}\n          prefixCls={'ant-dropdown'}\n          onClick={onClick}\n          getPopupContainer={() => {\n            return this.dropdownRef;\n          }}\n          placement={placement}\n        >\n          <div> {children} </div>\n        </AntDropdown>\n      </MtWrapper>\n    );\n  }\n}\nexport default Dropdown;\n"]}
