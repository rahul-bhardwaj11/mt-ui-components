{"version":3,"sources":["../../src/TreeSelect/index.js"],"names":["TreeSelect","props","onSearch","onSearchInputChange","value","then","setState","treeData","searchValue","onChange","state","className","Component","defaultProps","propTypes","PropTypes","array","isRequired","defaultValue","oneOfType","string","number","func"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;IAEMA,U;;;AACJ,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,8IACXA,KADW;;AAAA,UAmBnBC,QAnBmB,GAmBR,iBAAS;AAAA,UACZC,mBADY,GACY,MAAKF,KADjB,CACZE,mBADY;;AAElBA,0BAAoBC,KAApB,EAA2BC,IAA3B,CAAgC,oBAAY;AAC1C,cAAKC,QAAL,CAAc;AACZC,4BADY;AAEZC,uBAAaJ;AAFD,SAAd;AAID,OALD;AAMD,KA3BkB;;AAAA,UA6BnBK,QA7BmB,GA6BR,iBAAS;AAClB,YAAKH,QAAL,CAAc,EAAEF,YAAF,EAAd;AACD,KA/BkB;;AAEjB,UAAKM,KAAL,GAAa;AACXH,gBAAUN,MAAMM,QADL;AAEXC,mBAAa;AAFF,KAAb;AAFiB;AAMlB;;;;6BA2BQ;AAAA,mBACgC,KAAKE,KADrC;AAAA,UACDH,QADC,UACDA,QADC;AAAA,UACSC,WADT,UACSA,WADT;AAAA,UACsBJ,KADtB,UACsBA,KADtB;;AAEP,aACE,8BAAC,oBAAD;AACE,oBAAY,IADd;AAEE,qBAAaI,WAFf;AAGE,kBAAU,KAAKN,QAHjB;AAIE,eAAOE,KAJT;AAKE,kBAAUG,QALZ;AAME,kBAAU,KAAKE,QANjB;AAOE,mBAAW,KAAKR,KAAL,CAAWU;AAPxB,QADF;AAWD;;;EA/CsBC,gB;;AAAnBZ,U,CASGa,Y,GAAe;AACpBN,YAAU;AADU,C;AATlBP,U,CAaGc,S,GAAY;AACjBP,YAAUQ,oBAAUC,KAAV,CAAgBC,UADT;AAEjBC,gBAAcH,oBAAUI,SAAV,CAAoB,CAACJ,oBAAUK,MAAX,EAAmBL,oBAAUM,MAA7B,CAApB,CAFG;AAGjBlB,uBAAqBY,oBAAUO,IAHd;AAIjBX,aAAWI,oBAAUK;AAJJ,C;kBAoCNpB,U","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport AntTreeSelect from 'antd/lib/tree-select';\nimport 'antd/lib/tree-select/style/index.css';\nimport './index.scss';\n\n//const AntTreeNode = AntTreeSelect.TreeNode;\n\nclass TreeSelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeData: props.treeData,\n      searchValue: ''\n    };\n  }\n\n  static defaultProps = {\n    treeData: []\n  };\n\n  static propTypes = {\n    treeData: PropTypes.array.isRequired,\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    onSearchInputChange: PropTypes.func,\n    className: PropTypes.string\n  };\n\n  onSearch = value => {\n    let { onSearchInputChange } = this.props;\n    onSearchInputChange(value).then(treeData => {\n      this.setState({\n        treeData,\n        searchValue: value\n      });\n    });\n  };\n\n  onChange = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    let { treeData, searchValue, value } = this.state;\n    return (\n      <AntTreeSelect\n        showSearch={true}\n        searchValue={searchValue}\n        onSearch={this.onSearch}\n        value={value}\n        treeData={treeData}\n        onChange={this.onChange}\n        className={this.props.className}\n      />\n    );\n  }\n}\nexport default TreeSelect;\n"]}