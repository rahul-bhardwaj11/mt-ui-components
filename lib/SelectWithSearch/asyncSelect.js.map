{"version":3,"sources":["../../src/SelectWithSearch/asyncSelect.js"],"names":["initialCache","options","hasMore","isLoading","AsyncSelect","props","initialOptionsCache","state","search","optionsCache","selectedItems","showSelectedValues","menuIsOpen","showButton","showInput","inputValue","oldProps","cacheUniq","setState","currentOptions","prevState","loadOptions","__loadOptions","concat","isMulti","selectProps","onChange","onCheckboxClick","hideSelectedOptions","components","Option","optionWithCheckBox","MultiValueContainer","handleDisplayValue","Menu","buildMenu","Control","handleControl","value","closeMenuOnSelect","controlShouldRenderValue","isSearchable","autoFocus","onBlur","onDone","toggleButton","getButtonText","onInputChange","onMenuOpen","onMenuScrollToBottom","Component","propTypes","promiseOption","PropTypes","func","any","pageSize","number","array","multiple","bool","defaultValue","oneOfType","object","isButton","buttonLabel","string","defaultProps","event","action","__arrangeOptions","optionsThatAreNotSelected","filter","indexOf","option","newOptions","prevOptions","offset","length","then","resolve","componentDidMount","map","push","arrangedOptions","index","data","splice","onClearAll","selectedValues","selectedItem","isDisabled","label","children","arg","selectedItemsLength"],"mappings":"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","file":"asyncSelect.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button';\nimport CheckBox from '../CheckBox';\nimport Select, { components } from 'react-select';\n\nconst initialCache = {\n  options: [],\n  hasMore: true,\n  isLoading: false\n};\n\nexport default class AsyncSelect extends Component {\n  static propTypes = {\n    promiseOption: PropTypes.func,\n    cacheUniq: PropTypes.any,\n    pageSize: PropTypes.number,\n    options: PropTypes.array,\n    multiple: PropTypes.bool,\n    defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    isMulti: PropTypes.bool,\n    onChange: PropTypes.func,\n    isButton: PropTypes.bool,\n    buttonLabel: PropTypes.string\n  };\n\n  static defaultProps = {\n    cacheUniq: null,\n    pageSize: 10,\n    isButton: false,\n    buttonLabel: 'filter'\n  };\n\n  constructor(props) {\n    super(props);\n    const initialOptionsCache = props.options\n      ? {\n          '': {\n            isLoading: false,\n            options: props.options || [],\n            hasMore: true\n          }\n        }\n      : {};\n    this.state = {\n      search: '',\n      optionsCache: initialOptionsCache,\n      selectedItems: [],\n      showSelectedValues: true,\n      menuIsOpen: false,\n      showButton: false,\n      showInput: false,\n      inputValue: ''\n    };\n  }\n\n  componentDidUpdate(oldProps) {\n    const { cacheUniq } = this.props;\n\n    if (oldProps.cacheUniq !== cacheUniq) {\n      this.setState({\n        optionsCache: {}\n      });\n    }\n  }\n\n  onInputChange = (search, event) => {\n    if (event.action == 'input-change') {\n      this.setState({\n        inputValue: search,\n        search\n      });\n    }\n\n    const { optionsCache } = this.state;\n\n    if (!optionsCache[search]) {\n      this.loadOptions();\n    }\n  };\n\n  onMenuScrollToBottom = async () => {\n    const { search, optionsCache } = this.state;\n\n    const currentOptions = optionsCache[search];\n\n    if (currentOptions) {\n      await this.loadOptions();\n    }\n  };\n\n  async loadOptions() {\n    const { search, optionsCache } = this.state;\n\n    const currentOptions = optionsCache[search] || initialCache;\n\n    if (currentOptions.isLoading || !currentOptions.hasMore) {\n      return;\n    }\n\n    await this.setState(prevState => ({\n      search,\n      optionsCache: {\n        ...prevState.optionsCache,\n        [search]: {\n          ...currentOptions,\n          isLoading: true\n        }\n      }\n    }));\n\n    try {\n      const loadOptions = this.__loadOptions;\n\n      const { options, hasMore } = await loadOptions(\n        search,\n        currentOptions.options\n      );\n\n      await this.setState(prevState => ({\n        optionsCache: {\n          ...prevState.optionsCache,\n          [search]: {\n            ...currentOptions,\n            options: currentOptions.options.concat(options),\n            hasMore: !!hasMore,\n            isLoading: false\n          }\n        }\n      }));\n    } catch (e) {\n      await this.setState(prevState => ({\n        optionsCache: {\n          ...prevState.optionsCache,\n          [search]: {\n            ...currentOptions,\n            isLoading: false\n          }\n        }\n      }));\n    }\n  }\n\n  __arrangeOptions = (selectedItems, options) => {\n    const optionsThatAreNotSelected = options.filter(option => {\n      return selectedItems.indexOf(option) < 0;\n    });\n    const newOptions = [...selectedItems, ...optionsThatAreNotSelected];\n    return newOptions;\n  };\n\n  __loadOptions = (search, prevOptions) => {\n    let { promiseOption, pageSize } = this.props;\n    return new Promise(resolve => {\n      let offset = prevOptions.length;\n      promiseOption({ search, offset, pageSize }).then(options => {\n        resolve({ options, hasMore: options.length === pageSize });\n      }, {});\n    });\n  };\n\n  componentDidMount = async () => {\n    const { defaultValue, isButton } = this.props;\n    const { optionsCache, search } = this.state;\n    const currentOptions = optionsCache[search] || initialCache;\n    if (isButton) {\n      this.setState({ showButton: true });\n    }\n    const selectedItems = [];\n    if (defaultValue) {\n      if (defaultValue.length) {\n        defaultValue.map(option => {\n          selectedItems.push(option);\n        });\n      } else {\n        selectedItems.push(defaultValue);\n      }\n    }\n\n    const arrangedOptions = this.__arrangeOptions(\n      selectedItems,\n      currentOptions.options\n    );\n    this.setState(prevState => ({\n      selectedItems,\n      optionsCache: {\n        ...prevState.optionsCache,\n        [search]: {\n          isLoading: false,\n          options: arrangedOptions,\n          hasMore: true\n        }\n      }\n    }));\n    if (!optionsCache[''] || optionsCache[''].hasMore) {\n      await this.loadOptions();\n    }\n  };\n\n  onCheckboxClick = data => {\n    const selectedItems = [...this.state.selectedItems];\n    let index = selectedItems.indexOf(data);\n    if (index < 0) {\n      selectedItems.push(data);\n    } else {\n      selectedItems.splice(index, 1);\n    }\n    this.setState({ selectedItems });\n  };\n\n  onClearAll = () => {\n    const selectedItems = [];\n    this.setState({ selectedItems });\n  };\n\n  onDone = () => {\n    const { selectedItems, optionsCache } = this.state;\n    const options = optionsCache[''].options;\n    const selectedValues = selectedItems.map(selectedItem => {\n      return selectedItem.value;\n    });\n    this.props.onChange(selectedValues);\n    if (this.props.isButton) {\n      this.toggleButton();\n    }\n    const arrangedOptions = this.__arrangeOptions(selectedItems, options);\n    this.setState(prevState => ({\n      menuIsOpen: false,\n      showSelectedValues: true,\n      showInput: false,\n      inputValue: '',\n      optionsCache: {\n        ...prevState.optionsCache,\n        '': {\n          ...prevState.optionsCache[''],\n          options: arrangedOptions\n        }\n      }\n    }));\n  };\n\n  toggleButton = () => {\n    this.setState(prevState => ({\n      showButton: !prevState.showButton,\n      menuIsOpen: !prevState.menuIsOpen,\n      showInput: !prevState.showInput,\n      showSelectedValues: !prevState.showSelectedValues\n    }));\n  };\n\n  handleDisplayValue = ({ data }) => {\n    const { selectedItems } = this.state;\n    if (data.value == selectedItems[0].value)\n      return (\n        <div>{`${data.value}${\n          selectedItems.length > 1 ? `+${selectedItems.length - 1}` : ''\n        }`}</div>\n      );\n    return null;\n  };\n\n  optionWithCheckBox = ({ isDisabled, data }) => {\n    const { selectedItems } = this.state;\n    return !isDisabled ? (\n      <div onClick={() => this.onCheckboxClick(data)}>\n        <CheckBox checked={selectedItems.indexOf(data) > -1 ? true : false} />\n        {data.label}\n      </div>\n    ) : null;\n  };\n\n  buildMenu = props => {\n    const { selectedItems } = this.state;\n    return (\n      <div>\n        <components.Menu {...props}>\n          {props.children}\n          <Button type=\"primary\" onClick={this.onClearAll}>\n            {'Clear All'}\n          </Button>\n          <Button type=\"primary\" onClick={this.onDone}>{`Done${\n            selectedItems.length ? `(${selectedItems.length})` : ''\n          }`}</Button>\n        </components.Menu>\n      </div>\n    );\n  };\n\n  handleControl = arg => {\n    return (\n      <div\n        onClick={() => {\n          this.setState({\n            menuIsOpen: true,\n            showInput: true,\n            showSelectedValues: false\n          });\n        }}\n      >\n        <components.Control {...arg} />\n      </div>\n    );\n  };\n\n  getButtonText = () => {\n    const { selectedItems } = this.state;\n    const { buttonLabel } = this.props;\n    const selectedItemsLength = selectedItems.length;\n    if (selectedItemsLength) {\n      if (selectedItemsLength == 1) return `${selectedItems[0].label}`;\n      return `${buttonLabel}.${selectedItems.length}`;\n    }\n    return buttonLabel;\n  };\n\n  render() {\n    const {\n      search,\n      optionsCache,\n      selectedItems,\n      showSelectedValues,\n      menuIsOpen,\n      showButton,\n      showInput,\n      inputValue\n    } = this.state;\n    const { isMulti } = this.props;\n    const currentOptions = optionsCache[search] || initialCache;\n    const selectProps = isMulti\n      ? {\n          onChange: this.onCheckboxClick,\n          hideSelectedOptions: false,\n          components: {\n            Option: this.optionWithCheckBox,\n            MultiValueContainer: this.handleDisplayValue,\n            Menu: this.buildMenu,\n            Control: this.handleControl\n          },\n          value: selectedItems,\n          closeMenuOnSelect: false,\n          controlShouldRenderValue: showSelectedValues,\n          menuIsOpen: menuIsOpen,\n          isSearchable: showInput,\n          autoFocus: showInput,\n          onBlur: this.onDone,\n          inputValue: inputValue\n        }\n      : {};\n\n    if (showButton) {\n      return (\n        <Button onClick={this.toggleButton} type=\"primary\">\n          {this.getButtonText()}\n        </Button>\n      );\n    }\n\n    return (\n      <Select\n        {...this.props}\n        classNamePrefix={'mt-react-select'}\n        onInputChange={this.onInputChange}\n        isLoading={currentOptions.isLoading}\n        options={currentOptions.options}\n        onMenuOpen={this.onMenuOpen}\n        autoload={false}\n        onMenuScrollToBottom={this.onMenuScrollToBottom}\n        {...selectProps}\n      />\n    );\n  }\n}\n"]}