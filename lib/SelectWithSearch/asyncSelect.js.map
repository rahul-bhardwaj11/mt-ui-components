{"version":3,"sources":["../../src/SelectWithSearch/asyncSelect.js"],"names":["initialCache","options","hasMore","isLoading","AsyncSelect","props","initialOptionsCache","state","search","optionsCache","selectedItems","menuIsOpen","showSelect","showInput","inputValue","oldProps","cacheUniq","setState","currentOptions","prevState","loadOptions","__loadOptions","concat","document","removeEventListener","handleClickOutside","isMulti","isButton","buttonSize","normalizeOption","selectProps","onChange","onCheckboxClick","hideSelectedOptions","components","Option","optionWithCheckBox","MultiValueContainer","handleDisplayValue","Menu","buildMenu","Control","handleControl","value","closeMenuOnSelect","controlShouldRenderValue","isSearchable","autoFocus","onBlur","onDone","SingleValue","handleSingleValue","backspaceRemovesValue","e","buttonRef","toggleButton","getButtonText","onInputChange","onMenuOpen","onMenuScrollToBottom","Component","propTypes","promiseOption","PropTypes","func","any","pageSize","number","array","multiple","bool","defaultValue","oneOfType","object","buttonLabel","string","placeholder","defaultProps","event","action","__arrangeOptions","optionsThatAreNotSelected","filter","indexOf","option","newOptions","prevOptions","offset","length","then","resolve","componentDidMount","map","push","arrangedOptions","addEventListener","contains","target","isBlurActive","index","data","splice","onClearAll","selectedValues","selectedItem","newState","label","params","isDisabled","loaderStyle","position","bottom","left","children","arg","unshift","selectedItemsLength"],"mappings":"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","file":"asyncSelect.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button';\nimport CheckBox from '../CheckBox';\nimport Icon from '../Icon';\nimport Loader from '../Loader';\nimport Select, { components } from 'react-select';\n\nconst initialCache = {\n  options: [],\n  hasMore: true,\n  isLoading: false\n};\n\nexport default class AsyncSelect extends Component {\n  static propTypes = {\n    promiseOption: PropTypes.func,\n    cacheUniq: PropTypes.any,\n    pageSize: PropTypes.number,\n    options: PropTypes.array,\n    multiple: PropTypes.bool,\n    defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    isMulti: PropTypes.bool,\n    onChange: PropTypes.func,\n    isButton: PropTypes.bool,\n    buttonLabel: PropTypes.string,\n    placeholder: PropTypes.string,\n    buttonSize: PropTypes.string\n  };\n\n  static defaultProps = {\n    cacheUniq: null,\n    pageSize: 10,\n    isButton: false,\n    buttonLabel: 'filter'\n  };\n\n  constructor(props) {\n    super(props);\n    const initialOptionsCache = props.options\n      ? {\n        '': {\n          isLoading: false,\n          options: props.options || [],\n          hasMore: true\n        }\n      }\n      : {};\n    this.state = {\n      search: '',\n      optionsCache: initialOptionsCache,\n      selectedItems: [],\n      menuIsOpen: false,\n      showSelect: true,\n      showInput: false,\n      inputValue: ''\n    };\n  }\n\n  componentDidUpdate(oldProps) {\n    const { cacheUniq } = this.props;\n\n    if (oldProps.cacheUniq !== cacheUniq) {\n      this.setState({\n        optionsCache: {}\n      });\n    }\n  }\n\n  onInputChange = (search, event) => {\n    if (event.action == 'input-change') {\n      this.setState({\n        inputValue: search,\n        search\n      });\n    }\n\n    const { optionsCache } = this.state;\n\n    if (!optionsCache[search]) {\n      this.loadOptions();\n    }\n  };\n\n  onMenuScrollToBottom = async () => {\n    const { search, optionsCache } = this.state;\n\n    const currentOptions = optionsCache[search];\n\n    if (currentOptions) {\n      await this.loadOptions();\n    }\n  };\n\n  async loadOptions() {\n    const { search, optionsCache } = this.state;\n\n    const currentOptions = optionsCache[search] || initialCache;\n\n    if (currentOptions.isLoading || !currentOptions.hasMore) {\n      return;\n    }\n\n    await this.setState(prevState => ({\n      search,\n      optionsCache: {\n        ...prevState.optionsCache,\n        [search]: {\n          ...currentOptions,\n          isLoading: true\n        }\n      }\n    }));\n\n    try {\n      const loadOptions = this.__loadOptions;\n\n      const { options, hasMore } = await loadOptions(\n        search,\n        currentOptions.options\n      );\n\n      await this.setState(prevState => ({\n        optionsCache: {\n          ...prevState.optionsCache,\n          [search]: {\n            ...currentOptions,\n            options: currentOptions.options.concat(options),\n            hasMore: !!hasMore,\n            isLoading: false\n          }\n        }\n      }));\n    } catch (e) {\n      await this.setState(prevState => ({\n        optionsCache: {\n          ...prevState.optionsCache,\n          [search]: {\n            ...currentOptions,\n            isLoading: false\n          }\n        }\n      }));\n    }\n  }\n\n  __arrangeOptions = (selectedItems, options) => {\n    const optionsThatAreNotSelected = options.filter(option => {\n      return selectedItems.indexOf(option) < 0;\n    });\n    const newOptions = [...selectedItems, ...optionsThatAreNotSelected];\n    return newOptions;\n  };\n\n  __loadOptions = (search, prevOptions) => {\n    let { promiseOption, pageSize } = this.props;\n    return new Promise(resolve => {\n      let offset = prevOptions.length;\n      promiseOption({ search, offset, pageSize }).then(options => {\n        resolve({ options, hasMore: options.length === pageSize });\n      }, {});\n    });\n  };\n\n  componentDidMount = async () => {\n    const { defaultValue, isButton } = this.props;\n    const { optionsCache, search } = this.state;\n    const currentOptions = optionsCache[search] || initialCache;\n    if (isButton) {\n      this.setState({ showSelect: false });\n    }\n    const selectedItems = [];\n    if (defaultValue) {\n      if (defaultValue.length) {\n        defaultValue.map(option => {\n          selectedItems.push(option);\n        });\n      } else {\n        selectedItems.push(defaultValue);\n      }\n    }\n\n    const arrangedOptions = this.__arrangeOptions(\n      selectedItems,\n      currentOptions.options\n    );\n    this.setState(prevState => ({\n      selectedItems,\n      optionsCache: {\n        ...prevState.optionsCache,\n        [search]: {\n          isLoading: false,\n          options: arrangedOptions,\n          hasMore: true\n        }\n      }\n    }));\n    if (!optionsCache[''] || optionsCache[''].hasMore) {\n      await this.loadOptions();\n    }\n    document.addEventListener('mousedown', this.handleClickOutside);\n  };\n  handleClickOutside = event => {\n    if (this.buttonRef && this.buttonRef.contains(event.target)) {\n      this.isBlurActive = false;\n    }\n  };\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  onCheckboxClick = data => {\n    const selectedItems = [...this.state.selectedItems];\n    let index = selectedItems.indexOf(data);\n    if (index < 0) {\n      selectedItems.push(data);\n    } else {\n      selectedItems.splice(index, 1);\n    }\n    this.setState({ selectedItems });\n  };\n\n  onClearAll = () => {\n    const selectedItems = [];\n    this.setState({ selectedItems });\n  };\n\n  onDone = () => {\n    this.isBlurActive = true;\n    const { selectedItems, optionsCache } = this.state;\n    const { isButton, onChange } = this.props;\n    const options = optionsCache[''].options;\n    const selectedValues = selectedItems.map(selectedItem => {\n      return selectedItem.value;\n    });\n    onChange(selectedValues);\n    const arrangedOptions = this.__arrangeOptions(selectedItems, options);\n    this.setState(prevState => {\n      let newState = {\n        menuIsOpen: false,\n        showInput: false,\n        inputValue: '',\n        optionsCache: {\n          ...prevState.optionsCache,\n          '': {\n            ...prevState.optionsCache[''],\n            options: arrangedOptions\n          }\n        }\n      };\n      newState = isButton\n        ? Object.assign(newState, { showSelect: false })\n        : newState;\n      return newState;\n    });\n  };\n\n  toggleButton = () => {\n    if (this.isBlurActive) {\n      this.isBlurActive = false;\n      return;\n    }\n    this.setState(prevState => ({\n      showSelect: !prevState.showSelect,\n      menuIsOpen: !prevState.menuIsOpen,\n      showInput: !prevState.showInput\n    }));\n  };\n\n  handleDisplayValue = ({ data }) => {\n    const { selectedItems } = this.state;\n    if (data.value == selectedItems[0].value)\n      return (\n        <div className=\"selectedItem clearfix\">\n          <span className=\"selectedItemLabel floatL\">{`${data.label}`}</span>\n          <span className=\"floatL\">{`${\n            selectedItems.length > 1 ? `+${selectedItems.length - 1}` : ''\n            }`}</span>\n        </div>\n      );\n    return null;\n  };\n\n  handleSingleValue = ({ data, ...props }) => {\n    const { placeholder } = this.props;\n    return (\n      <components.SingleValue {...props}>\n        {data.value == 'None' ? placeholder : data.label}\n      </components.SingleValue>\n    );\n  };\n\n  optionWithCheckBox = (params) => {\n    const { isDisabled, data } = params;\n    const { selectedItems } = this.state;\n    if (!this.props.isMulti)\n      return (\n        <div title={data.label}>\n          <components.Option {...params} />\n        </div>\n      );\n    return !isDisabled ? (\n      <div\n        onClick={() => this.onCheckboxClick(data)}\n        className=\"checkboxWrapper\"\n        title={data.label}\n      >\n        <CheckBox checked={selectedItems.indexOf(data) > -1 ? true : false} />\n        <span className=\"dataLabel\">{data.label}</span>\n      </div>\n    ) : null;\n  };\n\n  buildMenu = props => {\n    const { selectedItems, search, optionsCache } = this.state;\n    const isLoading = optionsCache[search] && optionsCache[search].isLoading;\n    const { isMulti } = this.props;\n    let loaderStyle = {\n      position: 'absolute',\n      bottom: isMulti ? 30 : 0,\n      left: '50%'\n    };\n    return (\n      <components.Menu {...props}>\n        {props.children}\n        {!!isLoading && (\n          <Loader size={'sizeXSmall'} vCenter={false} style={loaderStyle} />\n        )}\n        {isMulti && (\n          <div className=\"componentWrapper\">\n            <div className=\"buttonWrapperL\">\n              <Button type=\"text\" onClick={this.onClearAll}>\n                {'Clear All'}\n              </Button>\n            </div>\n\n            <div className=\"buttonWrapperR\">\n              <Button type=\"text\" onClick={this.onDone}>\n                {`Done`}\n                <span className=\"doneMarginR\">\n                  {selectedItems.length ? `(${selectedItems.length})` : ''}\n                </span>\n              </Button>\n            </div>\n          </div>\n        )}\n      </components.Menu>\n    );\n  };\n\n  handleControl = arg => {\n    const { inputValue } = this.state;\n    return (\n      <div className=\"selectBoxWrapper\">\n        <div\n          className={this.state.showInput ? 'activeSearch' : ''}\n          onClick={() => {\n            this.setState({\n              menuIsOpen: true,\n              showInput: true\n            });\n          }}\n        >\n          <components.Control {...arg} />\n          <div className={inputValue.length ? 'activeInput' : ''}>\n            <Icon\n              type=\"cross\"\n              onClick={() => this.setState({ inputValue: '' })}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  normalizeOption = options => {\n    if (!this.props.isMulti && !this.state.search.length) {\n      options.unshift({ label: 'None', value: 'None' });\n    }\n    return options;\n  };\n\n  getButtonText = () => {\n    const { selectedItems } = this.state;\n    const { buttonLabel } = this.props;\n    const selectedItemsLength = selectedItems.length;\n    if (selectedItemsLength) {\n      if (selectedItemsLength == 1) return `${selectedItems[0].label}`;\n      return `${buttonLabel}.${selectedItems.length}`;\n    }\n    return buttonLabel;\n  };\n\n  render() {\n    const {\n      search,\n      optionsCache,\n      selectedItems,\n      menuIsOpen,\n      showSelect,\n      showInput,\n      inputValue\n    } = this.state;\n    const { isMulti, isButton, buttonSize } = this.props;\n    let currentOptions = optionsCache[search] || initialCache;\n    const options = this.normalizeOption([...currentOptions.options]);\n    const selectProps = isMulti\n      ? {\n        onChange: this.onCheckboxClick,\n        hideSelectedOptions: false,\n        components: {\n          Option: this.optionWithCheckBox,\n          MultiValueContainer: this.handleDisplayValue,\n          Menu: this.buildMenu,\n          Control: this.handleControl\n        },\n        value: selectedItems,\n        closeMenuOnSelect: false,\n        controlShouldRenderValue: !showInput,\n        menuIsOpen: menuIsOpen,\n        isSearchable: showInput,\n        autoFocus: showInput,\n        onBlur: this.onDone,\n        inputValue: inputValue\n      }\n      : {\n        components: {\n          Option: this.optionWithCheckBox,\n          Control: this.handleControl,\n          SingleValue: this.handleSingleValue,\n          Menu: this.buildMenu\n        },\n        onChange: value => {\n          this.setState({ showInput: false });\n          this.props.onChange(value);\n        },\n        onBlur: () => this.setState({ showInput: false }),\n        backspaceRemovesValue: false,\n        controlShouldRenderValue: !showInput\n      };\n\n    return (\n      <div >\n        {isButton && (\n          <div\n            ref={e => {\n              if (e) {\n                this.buttonRef = e;\n              }\n            }}\n          >\n            <Button type=\"secondary\" onClick={this.toggleButton} size={buttonSize}>\n              {this.getButtonText()}\n            </Button>\n          </div>\n        )}\n        {showSelect && (\n          <Select\n            {...this.props}\n            classNamePrefix={'mt-react-select'}\n            onInputChange={this.onInputChange}\n            options={options}\n            onMenuOpen={this.onMenuOpen}\n            autoload={false}\n            onMenuScrollToBottom={this.onMenuScrollToBottom}\n            {...selectProps}\n          />\n        )}\n      </div>\n    );\n  }\n}\n"]}