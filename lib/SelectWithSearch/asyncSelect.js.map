{"version":3,"sources":["../../src/SelectWithSearch/asyncSelect.js"],"names":["initialCache","options","hasMore","isLoading","AsyncSelect","props","initialOptionsCache","state","search","optionsCache","selectedItems","showSelectedValues","menuIsOpen","showButton","showInput","oldProps","cacheUniq","setState","currentOptions","prevState","loadOptions","__loadOptions","concat","defaultValue","initialType","length","map","option","push","arrangedOptions","__arrangeOptions","isMulti","toggleButton","getButtonText","onInputChange","onMenuOpen","onMenuScrollToBottom","onCheckboxClick","Option","optionWithCheckBox","MultiValueContainer","handleDisplayValue","Menu","buildMenu","Control","handleControl","Component","propTypes","promiseOption","PropTypes","func","any","pageSize","number","array","multiple","bool","oneOfType","object","onChange","string","buttonLabel","defaultProps","optionsThatAreNotSelected","filter","indexOf","newOptions","prevOptions","offset","then","resolve","componentDidMount","data","onClearAll","onDone","selectedValues","selectedItem","value","innerProps","isDisabled","onClick","label","valueContainer","children","onInputClick","arg"],"mappings":"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","file":"asyncSelect.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button';\nimport CheckBox from '../CheckBox';\nimport Select, { components } from 'react-select';\n\nconst initialCache = {\n  options: [],\n  hasMore: true,\n  isLoading: false\n};\n\nexport default class AsyncSelect extends Component {\n  static propTypes = {\n    promiseOption: PropTypes.func,\n    cacheUniq: PropTypes.any,\n    pageSize: PropTypes.number,\n    options: PropTypes.array,\n    multiple: PropTypes.bool,\n    defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    isMulti: PropTypes.bool,\n    onChange: PropTypes.func,\n    initialType: PropTypes.string,\n    buttonLabel: PropTypes.string\n  };\n\n  static defaultProps = {\n    cacheUniq: null,\n    pageSize: 10,\n    initialType: 'select',\n    buttonLabel: 'filter'\n  };\n\n  constructor(props) {\n    super(props);\n    const initialOptionsCache = props.options\n      ? {\n        '': {\n          isLoading: false,\n          options: props.options || [],\n          hasMore: true\n        }\n      }\n      : {};\n    this.state = {\n      search: '',\n      optionsCache: initialOptionsCache,\n      selectedItems: [],\n      showSelectedValues: true,\n      menuIsOpen: false,\n      showButton: false,\n      showInput: false\n    };\n  }\n\n  componentDidUpdate(oldProps) {\n    const { cacheUniq } = this.props;\n\n    if (oldProps.cacheUniq !== cacheUniq) {\n      this.setState({\n        optionsCache: {}\n      });\n    }\n  }\n\n  onInputChange = search => {\n    this.setState({\n      search\n    });\n\n    const { optionsCache } = this.state;\n\n    if (!optionsCache[search]) {\n      this.loadOptions();\n    }\n  };\n\n  onMenuScrollToBottom = async () => {\n    const { search, optionsCache } = this.state;\n\n    const currentOptions = optionsCache[search];\n\n    if (currentOptions) {\n      await this.loadOptions();\n    }\n  };\n\n  async loadOptions() {\n    const { search, optionsCache } = this.state;\n\n    const currentOptions = optionsCache[search] || initialCache;\n\n    if (currentOptions.isLoading || !currentOptions.hasMore) {\n      return;\n    }\n\n    await this.setState(prevState => ({\n      search,\n      optionsCache: {\n        ...prevState.optionsCache,\n        [search]: {\n          ...currentOptions,\n          isLoading: true\n        }\n      }\n    }));\n\n    try {\n      const loadOptions = this.__loadOptions;\n\n      const { options, hasMore } = await loadOptions(\n        search,\n        currentOptions.options\n      );\n\n      await this.setState(prevState => ({\n        optionsCache: {\n          ...prevState.optionsCache,\n          [search]: {\n            ...currentOptions,\n            options: currentOptions.options.concat(options),\n            hasMore: !!hasMore,\n            isLoading: false\n          }\n        }\n      }));\n    } catch (e) {\n      await this.setState(prevState => ({\n        optionsCache: {\n          ...prevState.optionsCache,\n          [search]: {\n            ...currentOptions,\n            isLoading: false\n          }\n        }\n      }));\n    }\n  }\n\n  componentWillMount() {\n    const { defaultValue, initialType } = this.props;\n    const { optionsCache, search } = this.state;\n    const currentOptions = optionsCache[search] || initialCache;\n    if (initialType == 'button') {\n      this.setState({ showButton: true });\n    }\n    const selectedItems = [];\n    if (defaultValue) {\n      if (defaultValue.length) {\n        defaultValue.map((option) => {\n          selectedItems.push(option);\n        })\n      }\n      else {\n        selectedItems.push(defaultValue);\n      }\n    }\n\n    const arrangedOptions = this.__arrangeOptions(selectedItems, currentOptions.options)\n    this.setState(prevState => ({\n      selectedItems,\n      optionsCache: {\n        ...prevState.optionsCache,\n        [search]: {\n          isLoading: false,\n          options: arrangedOptions,\n          hasMore: true\n        }\n      }\n    }));\n  }\n\n  __arrangeOptions = (selectedItems, options) => {\n    const optionsThatAreNotSelected = options.filter(option => {\n      return selectedItems.indexOf(option) < 0;\n    })\n    const newOptions = [...selectedItems, ...optionsThatAreNotSelected];\n    return newOptions;\n  }\n\n  __loadOptions = (search, prevOptions) => {\n    let { promiseOption, pageSize } = this.props;\n    return new Promise(resolve => {\n      let offset = prevOptions.length;\n      promiseOption({ search, offset, pageSize }).then(options => {\n        resolve({ options, hasMore: options.length === pageSize });\n      }, {});\n    });\n  };\n\n  componentDidMount = async () => {\n    //this.onMenuOpen();\n    const { optionsCache } = this.state;\n\n    if (!optionsCache[''] || optionsCache[''].hasMore) {\n      await this.loadOptions();\n    }\n  }\n\n  // onMenuOpen = async () => {\n  //   console.log(\"menu opened\");\n  //   const { optionsCache } = this.state;\n\n  //   if (!optionsCache[''] || optionsCache[''].hasMore) {\n  //     await this.loadOptions();\n  //   }\n  // };\n\n  onCheckboxClick = (data) => {\n    if (data)\n      this.setState({ selectedItems: data });\n  }\n\n  onClearAll = () => {\n    const selectedItems = [];\n    this.setState({ selectedItems });\n  }\n\n  onDone = () => {\n    const { selectedItems, optionsCache } = this.state;\n    const options = optionsCache[''].options;\n    const selectedValues = selectedItems.map((selectedItem) => {\n      return selectedItem.value;\n    })\n    if (this.props.onChange)\n      this.props.onChange(selectedValues);\n    if (this.props.initialType == 'button') {\n      this.toggleButton();\n    }\n    const arrangedOptions = this.__arrangeOptions(selectedItems, options);\n    this.setState(prevState => ({\n      menuIsOpen: false,\n      showSelectedValues: true,\n      optionsCache: {\n        ...prevState.optionsCache,\n        '': {\n          ...prevState.optionsCache[''],\n          options: arrangedOptions\n        }\n      }\n    }))\n  }\n\n  toggleButton = () => {\n    this.setState(\n      prevState => ({\n        showButton: !prevState.showButton,\n        menuIsOpen: !prevState.menuIsOpen,\n        showInput: !prevState.showInput,\n        showSelectedValues: !prevState.showSelectedValues\n      }));\n  }\n\n  handleDisplayValue = ({ data }) => {\n    const { selectedItems } = this.state;\n    if (data.value == selectedItems[0].value)\n      return (\n        <div>{`${data.value}${selectedItems.length > 1 ? `+${selectedItems.length - 1}` : \"\"}`}</div>\n      )\n    return null;\n  }\n\n  optionWithCheckBox = ({ innerProps, isDisabled, data }) => {\n    const { selectedItems } = this.state;\n    return !isDisabled ? (\n      <div onClick={innerProps.onClick}>\n        <CheckBox\n          checked={selectedItems.indexOf(data) > -1 ? true : false}\n        />\n        {data.label}\n      </div>\n    ) : null\n  }\n\n  valueContainer = ({ children, ...props }) => {\n    return (\n      <div onClick={this.onInputClick} {...props}>{children}</div>\n    )\n  }\n\n  buildMenu = (props) => {\n    const { selectedItems } = this.state;\n    return (\n      <div>\n        <components.Menu {...props}>\n          {props.children}\n          <Button type=\"primary\" onClick={this.onClearAll}>{\"Clear All\"}</Button>\n          <Button type=\"primary\" onClick={this.onDone}>{`Done${selectedItems.length ? `+${selectedItems.length}` : \"\"}`}</Button>\n        </components.Menu>\n      </div>\n    )\n  }\n\n  handleControl = (arg) => {\n    return (\n      <div onClick={\n        () => {\n          this.setState(prevState => ({ menuIsOpen: !prevState.menuIsOpen, showInput: true, showSelectedValues: false }))\n        }}>\n        <components.Control {...arg} />\n      </div>\n    )\n  }\n  getButtonText = () => {\n    const { selectedItems } = this.state;\n    const { buttonLabel } = this.props;\n    if (selectedItems.length) {\n      return (\n        `${buttonLabel}.${selectedItems.length}`\n      )\n    }\n    return buttonLabel;\n  }\n\n  render() {\n    const { search, optionsCache, selectedItems, showSelectedValues, menuIsOpen, showButton, showInput } = this.state;\n    const { isMulti } = this.props;\n    const currentOptions = optionsCache[search] || initialCache;\n\n    if (showButton) {\n      return (\n        <Button onClick={this.toggleButton} type='primary'>\n          {this.getButtonText()}\n        </Button>\n      )\n    }\n\n    if (isMulti) {\n      return (\n        <Select\n          {...this.props}\n          classNamePrefix={'mt-react-select'}\n          onInputChange={this.onInputChange}\n          isLoading={currentOptions.isLoading}\n          options={currentOptions.options}\n          onMenuOpen={this.onMenuOpen}\n          autoload={false}\n          onMenuScrollToBottom={this.onMenuScrollToBottom}\n          onChange={this.onCheckboxClick}\n          hideSelectedOptions={false}\n          components={{\n            Option: this.optionWithCheckBox,\n            MultiValueContainer: this.handleDisplayValue,\n            Menu: this.buildMenu,\n            Control: this.handleControl\n          }}\n          value={selectedItems}\n          closeMenuOnSelect={false}\n          controlShouldRenderValue={showSelectedValues}\n          menuIsOpen={menuIsOpen}\n          isSearchable={showInput}\n          autoFocus={showInput}\n        />\n      )\n    }\n    return (\n\n      <Select\n        {...this.props}\n        classNamePrefix={'mt-react-select'}\n        onInputChange={this.onInputChange}\n        isLoading={currentOptions.isLoading}\n        options={currentOptions.options}\n        onMenuOpen={this.onMenuOpen}\n        autoload={false}\n        onMenuScrollToBottom={this.onMenuScrollToBottom}\n      />\n\n    );\n  }\n}\n"]}