{"version":3,"sources":["../../src/SelectWithSearch/syncSelect.js"],"names":["noop","undefined","SyncSelect","state","options","props","selectedItems","showSelectedValues","menuIsOpen","showButton","showInput","inputValue","__sortOptions","optionsToSort","filter","indexOf","option","sort","item1","item2","label","sortedOptions","onCheckboxClick","index","data","push","splice","setState","onClearAll","onDone","selectedValues","map","selectedItem","value","onChange","isButton","toggleButton","newState","prevState","handleDisplayValue","length","optionWithCheckBox","isDisabled","buildMenu","children","handleControl","arg","onInputChange","input","event","action","getButtonText","buttonLabel","selectedItemsLength","defaultValue","nextProps","isMulti","selectProps","hideSelectedOptions","components","Option","MultiValueContainer","Menu","Control","closeMenuOnSelect","controlShouldRenderValue","isSearchable","autoFocus","onBlur","Component","propTypes","PropTypes","arrayOf","object","oneOfType","array","bool","func","string","defaultProps"],"mappings":"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","file":"syncSelect.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Select, { components } from 'react-select';\nimport CheckBox from '../CheckBox';\nimport Button from '../Button';\n\nconst noop = () => undefined;\n\nexport default class SyncSelect extends Component {\n  static propTypes = {\n    options: PropTypes.arrayOf(PropTypes.object),\n    defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    isMulti: PropTypes.bool,\n    onChange: PropTypes.func,\n    isButton: PropTypes.bool,\n    buttonLabel: PropTypes.string\n  };\n\n  static defaultProps = {\n    buttonLabel: 'filter',\n    onChange: noop\n  };\n\n  state = {\n    options: this.props.options,\n    selectedItems: [],\n    showSelectedValues: true,\n    menuIsOpen: false,\n    showButton: false,\n    showInput: false,\n    inputValue: ''\n  };\n\n  componentDidMount() {\n    const { defaultValue, isButton, options } = this.props;\n    if (isButton) {\n      this.setState({ showButton: true });\n    }\n    const selectedItems = [];\n    if (defaultValue) {\n      if (defaultValue.length) {\n        defaultValue.map(option => {\n          selectedItems.push(option);\n        });\n      } else {\n        selectedItems.push(defaultValue);\n      }\n    }\n    const sortedOptions = this.__sortOptions(selectedItems, options);\n    this.setState({ selectedItems, options: sortedOptions });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.options != nextProps.options) {\n      this.setState({\n        options: nextProps.options\n      });\n    }\n  }\n\n  __sortOptions = (selectedItems, options) => {\n    const optionsToSort = options.filter(option => {\n      return selectedItems.indexOf(option) < 0;\n    });\n    optionsToSort.sort((item1, item2) => {\n      return item1.label > item2.label;\n    });\n    const sortedOptions = [...selectedItems, ...optionsToSort];\n    return sortedOptions;\n  };\n\n  onCheckboxClick = data => {\n    const selectedItems = [...this.state.selectedItems];\n    let index = selectedItems.indexOf(data);\n    if (index < 0) {\n      selectedItems.push(data);\n    } else {\n      selectedItems.splice(index, 1);\n    }\n    this.setState({ selectedItems });\n  };\n\n  onClearAll = () => {\n    const selectedItems = [];\n    this.setState({ selectedItems });\n  };\n\n  onDone = () => {\n    const { selectedItems, options } = this.state;\n    const selectedValues = selectedItems.map(selectedItem => {\n      return selectedItem.value;\n    });\n    this.props.onChange(selectedValues);\n    if (this.props.isButton) {\n      this.toggleButton();\n    }\n    const sortedOptions = this.__sortOptions(selectedItems, options);\n    const newState = {\n      options: sortedOptions,\n      menuIsOpen: false,\n      showInput: false,\n      showSelectedValues: true,\n      inputValue: ''\n    };\n    this.setState({ ...newState });\n  };\n\n  toggleButton = () => {\n    this.setState(prevState => ({\n      showButton: !prevState.showButton,\n      menuIsOpen: !prevState.menuIsOpen,\n      showInput: !prevState.showInput,\n      showSelectedValues: !prevState.showSelectedValues\n    }));\n  };\n\n  handleDisplayValue = ({ data }) => {\n    const { selectedItems } = this.state;\n    if (data.value == selectedItems[0].value)\n      return (\n        <div className=\"selectedItem\">{`${data.label}${\n          selectedItems.length > 1 ? `+${selectedItems.length - 1}` : ''\n        }`}</div>\n      );\n    return null;\n  };\n\n  optionWithCheckBox = ({ isDisabled, data }) => {\n    const { selectedItems } = this.state;\n    return !isDisabled ? (\n      <div\n        onClick={() => this.onCheckboxClick(data)}\n        className=\"checkboxWrapper\"\n      >\n        <CheckBox checked={selectedItems.indexOf(data) > -1} />\n        <span className=\"dataLabel\">{data.label}</span>\n      </div>\n    ) : null;\n  };\n\n  buildMenu = props => {\n    const { selectedItems } = this.state;\n    return (\n      <components.Menu {...props}>\n        {props.children}\n        <div className=\"componentWrapper\">\n          <div className=\"buttonWrapperL\">\n            <Button type=\"text\" onClick={this.onClearAll}>\n              {'Clear All'}\n            </Button>\n          </div>\n          <div className=\"buttonWrapperR\">\n            <Button type=\"text\" onClick={this.onDone}>\n              {`Done${selectedItems.length ? `(${selectedItems.length})` : ''}`}\n            </Button>\n          </div>\n        </div>\n      </components.Menu>\n    );\n  };\n\n  handleControl = arg => {\n    return (\n      <div\n        onClick={() => {\n          this.setState({\n            menuIsOpen: true,\n            showInput: true,\n            showSelectedValues: false\n          });\n        }}\n      >\n        <components.Control {...arg} />\n      </div>\n    );\n  };\n\n  onInputChange = (input, event) => {\n    if (event.action == 'input-change') this.setState({ inputValue: input });\n  };\n\n  getButtonText = () => {\n    const { selectedItems } = this.state;\n    const { buttonLabel } = this.props;\n    const selectedItemsLength = selectedItems.length;\n    if (selectedItemsLength) {\n      if (selectedItemsLength == 1) return `${selectedItems[0].label}`;\n      return `${buttonLabel}.${selectedItems.length}`;\n    }\n    return buttonLabel;\n  };\n\n  render() {\n    const { isMulti } = this.props;\n    const {\n      options,\n      selectedItems,\n      showSelectedValues,\n      menuIsOpen,\n      showButton,\n      showInput,\n      inputValue\n    } = this.state;\n    const selectProps = isMulti\n      ? {\n          onChange: this.onCheckboxClick,\n          hideSelectedOptions: false,\n          components: {\n            Option: this.optionWithCheckBox,\n            MultiValueContainer: this.handleDisplayValue,\n            Menu: this.buildMenu,\n            Control: this.handleControl\n          },\n          value: selectedItems,\n          closeMenuOnSelect: false,\n          controlShouldRenderValue: showSelectedValues,\n          menuIsOpen: menuIsOpen,\n          isSearchable: showInput,\n          autoFocus: showInput,\n          onBlur: this.onDone,\n          inputValue: inputValue,\n          onInputChange: this.onInputChange\n        }\n      : {};\n\n    if (showButton) {\n      return (\n        <Button onClick={this.toggleButton} type=\"primary\">\n          {this.getButtonText()}\n        </Button>\n      );\n    }\n    return (\n      <Select\n        {...this.props}\n        options={options}\n        classNamePrefix={'mt-react-select'}\n        {...selectProps}\n      />\n    );\n  }\n}\n"]}