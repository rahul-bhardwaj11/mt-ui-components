{"version":3,"sources":["../../src/SelectWithSearch/syncSelect.js"],"names":["noop","undefined","SyncSelect","state","options","props","selectedItems","showSelectedValues","menuIsOpen","showButton","showInput","__sortOptions","optionsToSort","filter","indexOf","option","sort","item1","item2","label","sortedOptions","onCheckboxClick","data","setState","onClearAll","onDone","selectedValues","map","selectedItem","value","onChange","initialType","toggleButton","newState","prevState","handleDisplayValue","length","optionWithCheckBox","innerProps","isDisabled","onClick","valueContainer","children","onInputClick","buildMenu","handleControl","arg","getButtonText","filterLabel","defaultValue","push","isMulti","Option","MultiValueContainer","Menu","Control","Component","propTypes","PropTypes","arrayOf","object","oneOfType","array","bool","func","string","defaultProps"],"mappings":"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","file":"syncSelect.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Select, { components } from 'react-select';\nimport CheckBox from '../CheckBox';\nimport Button from '../Button';\n\nconst noop = () => undefined;\n\nexport default class SyncSelect extends Component {\n  static propTypes = {\n    options: PropTypes.arrayOf(PropTypes.object),\n    defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    isMulti: PropTypes.bool,\n    onChange: PropTypes.func,\n    initialType: PropTypes.string,\n    filterLabel: PropTypes.string\n  };\n\n  static defaultProps = {\n    initialType: 'select',\n    filterLabel: 'filter',\n    onChange: noop\n  };\n\n  state = {\n    options: this.props.options,\n    selectedItems: [],\n    showSelectedValues: true,\n    menuIsOpen: false,\n    showButton: false,\n    showInput: false\n  }\n\n  componentWillMount() {\n    const { defaultValue, initialType, options } = this.props;\n    if (initialType == 'button') {\n      this.setState({ showButton: true });\n    }\n    const selectedItems = [];\n    if (defaultValue) {\n      if (defaultValue.length) {\n        defaultValue.map((option) => {\n          selectedItems.push(option);\n        })\n      }\n      else {\n        selectedItems.push(defaultValue);\n      }\n    }\n    const sortedOptions = this.__sortOptions(selectedItems, options);\n    this.setState({ selectedItems, options: sortedOptions });\n  }\n\n  __sortOptions = (selectedItems, options) => {\n    const optionsToSort = options.filter(option => {\n      return selectedItems.indexOf(option) < 0;\n    })\n    optionsToSort.sort((item1, item2) => {\n      return item1.label > item2.label;\n    })\n    const sortedOptions = [...selectedItems, ...optionsToSort];\n    return sortedOptions;\n  }\n\n  onCheckboxClick = (data) => {\n    if (data)\n      this.setState({ selectedItems: data });\n  }\n\n  onClearAll = () => {\n    const selectedItems = [];\n    this.setState({ selectedItems });\n  }\n\n  onDone = () => {\n    const { selectedItems, options } = this.state;\n    const selectedValues = selectedItems.map((selectedItem) => {\n      return selectedItem.value;\n    })\n    this.props.onChange(selectedValues);\n    if (this.props.initialType == 'button') {\n      this.toggleButton();\n    }\n    const sortedOptions = this.__sortOptions(selectedItems, options);\n    const newState = {\n      options: sortedOptions,\n      menuIsOpen: false, showInput: false,\n      showSelectedValues: true\n    }\n    this.setState({ ...newState });\n  }\n\n  toggleButton = () => {\n    this.setState(\n      prevState => ({\n        showButton: !prevState.showButton,\n        menuIsOpen: !prevState.menuIsOpen,\n        showInput: !prevState.showInput,\n        showSelectedValues: !prevState.showSelectedValues\n      }));\n  }\n\n  handleDisplayValue = ({ data }) => {\n    const { selectedItems } = this.state;\n    if (data.value == selectedItems[0].value)\n      return (\n        <div>{`${data.value}${selectedItems.length > 1 ? `+${selectedItems.length - 1}` : \"\"}`}</div>\n      )\n    return null;\n  }\n\n  optionWithCheckBox = ({ innerProps, isDisabled, data }) => {\n    const { selectedItems } = this.state;\n    return !isDisabled ? (\n      <div onClick={innerProps.onClick}>\n        <CheckBox\n          checked={selectedItems.indexOf(data) > -1 ? true : false}\n        />\n        {data.label}\n      </div>\n    ) : null\n  }\n\n  valueContainer = ({ children, ...props }) => {\n    return (\n      <div onClick={this.onInputClick} {...props}>{children}</div>\n    )\n  }\n\n  buildMenu = (props) => {\n    const { selectedItems } = this.state;\n    return (\n      <div>\n        <components.Menu {...props}>\n          {props.children}\n          <Button type=\"primary\" onClick={this.onClearAll}>{\"Clear All\"}</Button>\n          <Button type=\"primary\" onClick={this.onDone}>{`Done${selectedItems.length ? `+${selectedItems.length}` : \"\"}`}</Button>\n        </components.Menu>\n      </div>\n    )\n  }\n\n  handleControl = (arg) => {\n    return (\n      <div onClick={\n        () => {\n          this.setState(prevState => ({ menuIsOpen: !prevState.menuIsOpen, showInput: true, showSelectedValues: false }))\n        }}>\n        <components.Control {...arg} />\n      </div>\n    )\n  }\n  getButtonText = () => {\n    const { selectedItems } = this.state;\n    const { filterLabel } = this.props;\n    if (selectedItems.length) {\n      return (\n        `${filterLabel}.${selectedItems.length}`\n      )\n    }\n    return filterLabel;\n  }\n\n  render() {\n    const { isMulti } = this.props;\n    const { options, selectedItems, showSelectedValues, menuIsOpen, showButton, showInput } = this.state;\n    if (showButton) {\n      return (\n        <Button onClick={this.toggleButton} type='primary'>\n          {this.getButtonText()}\n        </Button>\n      )\n    }\n    if (isMulti) {\n      return (\n        <Select\n          {...this.props}\n          autofocus={true}\n          options={options}\n          classNamePrefix={'mt-react-select'}\n          onChange={this.onCheckboxClick}\n          hideSelectedOptions={false}\n          components={{\n            Option: this.optionWithCheckBox,\n            MultiValueContainer: this.handleDisplayValue,\n            Menu: this.buildMenu,\n            Control: this.handleControl\n          }}\n          value={selectedItems}\n          closeMenuOnSelect={false}\n          controlShouldRenderValue={showSelectedValues}\n          menuIsOpen={menuIsOpen}\n          isSearchable={showInput}\n          autoFocus={showInput}\n        />\n      );\n    }\n    return (\n      <Select\n        {...this.props}\n        options={options}\n        classNamePrefix={'mt-react-select'}\n      />\n    )\n  }\n\n}\n"]}