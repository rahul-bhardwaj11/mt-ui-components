{"version":3,"sources":["../../src/SelectWithSearch/syncSelect.js"],"names":["noop","undefined","SyncSelect","state","options","props","selectedItems","showSelectedValues","menuIsOpen","showSelect","showInput","inputValue","normalizeOption","isMulti","sortedOptions","unshift","label","value","__sortOptions","optionsToSort","filter","indexOf","option","sort","item1","item2","onCheckboxClick","index","data","push","splice","setState","onClearAll","onDone","isButton","onChange","selectedValues","map","selectedItem","newState","toggleButton","prevState","handleDisplayValue","length","handleSingleValue","placeholder","optionWithCheckBox","isDisabled","buildMenu","children","handleControl","arg","handleInput","isHidden","onInputChange","input","event","action","getButtonText","buttonLabel","selectedItemsLength","defaultValue","nextProps","selectProps","hideSelectedOptions","components","Option","MultiValueContainer","Menu","Control","Input","closeMenuOnSelect","controlShouldRenderValue","isSearchable","autoFocus","autosize","SingleValue","backspaceRemovesValue","wrapperRef","node","Component","propTypes","PropTypes","arrayOf","object","oneOfType","array","bool","func","string","defaultProps"],"mappings":"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","file":"syncSelect.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Select, { components } from 'react-select';\nimport CheckBox from '../CheckBox';\nimport Button from '../Button';\nimport Icon from '../Icon';\n\nconst noop = () => undefined;\n\nexport default class SyncSelect extends Component {\n  static propTypes = {\n    options: PropTypes.arrayOf(PropTypes.object),\n    defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    isMulti: PropTypes.bool,\n    onChange: PropTypes.func,\n    isButton: PropTypes.bool,\n    buttonLabel: PropTypes.string,\n    placeholder: PropTypes.string\n  };\n\n  static defaultProps = {\n    buttonLabel: 'filter',\n    onChange: noop\n  };\n\n  state = {\n    options: this.props.options,\n    selectedItems: [],\n    showSelectedValues: true,\n    menuIsOpen: false,\n    showSelect: true,\n    showInput: false,\n    inputValue: ''\n  };\n\n  componentDidMount() {\n    const { defaultValue, isButton, options } = this.props;\n    if (isButton) {\n      this.setState({ showSelect: false });\n    }\n    const selectedItems = [];\n    if (defaultValue) {\n      if (defaultValue.length) {\n        defaultValue.map(option => {\n          selectedItems.push(option);\n        });\n      } else {\n        selectedItems.push(defaultValue);\n      }\n    }\n    let sortedOptions = this.__sortOptions(options, selectedItems);\n    sortedOptions = this.normalizeOption(sortedOptions);\n    this.setState({ selectedItems, options: sortedOptions });\n  }\n\n  normalizeOption = sortedOptions => {\n    const { isMulti } = this.props;\n    if (!isMulti) {\n      sortedOptions.unshift({ label: 'None', value: 'None' });\n    }\n    return sortedOptions;\n  };\n  componentWillReceiveProps(nextProps) {\n    if (this.props.options != nextProps.options) {\n      let sortedOptions = this.__sortOptions(nextProps.options);\n      sortedOptions = this.normalizeOption(sortedOptions);\n      this.setState({ options: sortedOptions });\n    }\n  }\n\n  __sortOptions = (options, selectedItems = []) => {\n    const optionsToSort = options.filter(option => {\n      return selectedItems.indexOf(option) < 0;\n    });\n    optionsToSort.sort((item1, item2) => {\n      return item1.label > item2.label;\n    });\n    const sortedOptions = [...selectedItems, ...optionsToSort];\n    return sortedOptions;\n  };\n\n  onCheckboxClick = data => {\n    const selectedItems = [...this.state.selectedItems];\n    let index = selectedItems.indexOf(data);\n    if (index < 0) {\n      selectedItems.push(data);\n    } else {\n      selectedItems.splice(index, 1);\n    }\n    this.setState({ selectedItems });\n  };\n\n  onClearAll = () => {\n    const selectedItems = [];\n    this.setState({ selectedItems });\n  };\n\n  onDone = () => {\n    // console.log(event.target);\n    // if (this.wrapperRef.contains(event.target)) {\n    //   console.log(\"find\");\n    // }\n    // console.log(ref, e.target);\n    const { selectedItems, options } = this.state;\n    const { isButton, onChange } = this.props;\n    const selectedValues = selectedItems.map(selectedItem => {\n      return selectedItem.value;\n    });\n    onChange(selectedValues);\n    const sortedOptions = this.__sortOptions(options, selectedItems);\n    let newState = {\n      options: sortedOptions,\n      menuIsOpen: false,\n      showInput: false,\n      showSelectedValues: true,\n      inputValue: ''\n    };\n    newState = isButton\n      ? Object.assign(newState, { showSelect: false })\n      : newState;\n    this.setState({ ...newState });\n  };\n\n  toggleButton = () => {\n    // console.log(this.wrapperRef);\n    // console.log(event.target);\n    // if (this.wrapperRef == event.target) {\n    //   console.log(\"equal\");\n    // }\n    this.setState(prevState => ({\n      showSelect: !prevState.showSelect,\n      menuIsOpen: !prevState.menuIsOpen,\n      showSelectedValues: !prevState.showSelectedValues,\n      showInput: !prevState.showInput\n    }));\n  };\n\n  handleDisplayValue = ({ data }) => {\n    const { selectedItems } = this.state;\n    if (data.value == selectedItems[0].value)\n      return (\n        <div className=\"selectedItem\">{`${data.label}${\n          selectedItems.length > 1 ? `+${selectedItems.length - 1}` : ''\n        }`}</div>\n      );\n    return null;\n  };\n\n  handleSingleValue = ({ data }) => {\n    if (data.value == 'None')\n      return (\n        <div className=\"selectedSingleValue\">{this.props.placeholder}</div>\n      );\n    return <div className=\"selectedSingleValue\">{data.label}</div>;\n  };\n\n  optionWithCheckBox = ({ isDisabled, data }) => {\n    const { selectedItems } = this.state;\n    return !isDisabled ? (\n      <div\n        onClick={() => this.onCheckboxClick(data)}\n        className=\"checkboxWrapper\"\n      >\n        <CheckBox checked={selectedItems.indexOf(data) > -1} />\n        <span className=\"dataLabel\">{data.label}</span>\n      </div>\n    ) : null;\n  };\n\n  buildMenu = props => {\n    const { selectedItems } = this.state;\n    return (\n      <components.Menu {...props}>\n        {props.children}\n        <div className=\"componentWrapper\">\n          <div className=\"buttonWrapperL\">\n            <Button type=\"text\" onClick={this.onClearAll}>\n              {'Clear All'}\n            </Button>\n          </div>\n          <div className=\"buttonWrapperR\">\n            <Button type=\"text\" onClick={this.onDone}>\n              <span className=\"marginR5\"> Done</span>\n              {`${selectedItems.length ? `(${selectedItems.length})` : ''}`}\n            </Button>\n          </div>\n        </div>\n      </components.Menu>\n    );\n  };\n\n  handleControl = arg => {\n    return (\n      <div className=\"selectBoxWrapper\">\n        <div className={this.state.showInput ? 'activeSearch' : ''}\n          onClick={() => {\n            this.setState({\n              menuIsOpen: true,\n              showInput: true,\n              showSelectedValues: false\n            });\n          }}\n        >\n          <components.Control {...arg} />\n          <Icon type=\"Cancel\" onClick={() => this.setState({ inputValue: '' })} />\n        </div>\n      </div>\n    );\n  };\n\n  handleInput = props => {\n    if (props.isHidden) {\n      return <components.Input {...props} />;\n    }\n    return (\n      <div className={props.value.length ? 'activeInput' : ''}>\n        <components.Input {...props} />\n      </div>\n    );\n  };\n\n  onInputChange = (input, event) => {\n    if (event.action == 'input-change') this.setState({ inputValue: input });\n  };\n\n  getButtonText = () => {\n    const { selectedItems } = this.state;\n    const { buttonLabel } = this.props;\n    const selectedItemsLength = selectedItems.length;\n    if (selectedItemsLength) {\n      if (selectedItemsLength == 1) return `${selectedItems[0].label}`;\n      return `${buttonLabel}.${selectedItems.length}`;\n    }\n    return buttonLabel;\n  };\n\n  render() {\n    const { isMulti, isButton } = this.props;\n    const {\n      options,\n      selectedItems,\n      showSelectedValues,\n      menuIsOpen,\n      showSelect,\n      showInput,\n      inputValue\n    } = this.state;\n    const selectProps = isMulti\n      ? {\n          onChange: this.onCheckboxClick,\n          hideSelectedOptions: false,\n          components: {\n            Option: this.optionWithCheckBox,\n            MultiValueContainer: this.handleDisplayValue,\n            Menu: this.buildMenu,\n            Control: this.handleControl,\n            Input: this.handleInput\n          },\n          value: selectedItems,\n          closeMenuOnSelect: false,\n          controlShouldRenderValue: showSelectedValues,\n          menuIsOpen: menuIsOpen,\n          isSearchable: showInput,\n          autoFocus: showInput,\n          autosize: false,\n       //   onBlur: this.onDone,\n          inputValue: inputValue,\n          onInputChange: this.onInputChange\n        }\n      : {\n          components: {\n            Control: this.handleControl,\n            Input: this.handleInput,\n            SingleValue: this.handleSingleValue\n          },\n          onChange: value => {\n            this.setState({ showInput: false });\n            this.props.onChange(value);\n          },\n       //   onBlur: () => this.setState({ showInput: false }),\n          backspaceRemovesValue: false\n        };\n\n    return (\n      <div>\n        {isButton && (\n          <Button\n            type=\"secondary\"\n            onClick={this.toggleButton}\n            ref={node => (this.wrapperRef = node)}\n          >\n            {this.getButtonText()}\n          </Button>\n        )}\n        {showSelect && (\n          <Select\n            {...this.props}\n            options={options}\n            classNamePrefix={'mt-react-select'}\n            {...selectProps}\n          />\n        )}\n      </div>\n    );\n  }\n}\n"]}