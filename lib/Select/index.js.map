{"version":3,"sources":["../../src/Select/index.js"],"names":["Option","AntSelect","MtWrapper","styled","div","Select","options","props","el","selectDropdownRef","event","stopPropagation","map","option","key","content","Component","propTypes","PropTypes","any","isRequired","onChange","func","style","object","defaultValue","oneOfType","string","number","defaultProps","minWidth"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAASC,iBAAUD,MAAzB;;AAEA,IAAME,YAAYC,2BAAOC,GAAnB,iBAAN;;IAIMC,M;;;;;;;;;;6BAYK;AAAA;;AAAA,UACDC,OADC,GACW,KAAKC,KADhB,CACDD,OADC;;;AAGP,aACE;AAAC,iBAAD;AAAA;AACE,oBAAU,sBAAM;AACd,gBAAIE,EAAJ,EAAQ;AACN,qBAAKC,iBAAL,GAAyBD,EAAzB;AACD;AACF;AALH;AAOE;AAAC,0BAAD;AAAA,qCACM,KAAKD,KADX;AAEE,qBAAS,wBAAS;AAChBG,oBAAMC,eAAN;AACD,aAJH;AAKE,+BAAmB,6BAAM;AACvB,qBAAO,OAAKF,iBAAZ;AACD;AAPH;AASGH,kBAAQM,GAAR,CAAY,kBAAU;AACrB,mBACE;AAAC,oBAAD;AAAA,gBAAQ,KAAKC,OAAOC,GAApB,EAAyB,OAAOD,OAAOC,GAAvC;AACG,qBAAOD,OAAOE,OAAd,KAA0B,QAA1B,GACC,8BAAC,sBAAD,IAAc,SAASF,OAAOE,OAA9B,GADD,GAGCF,OAAOE;AAJX,aADF;AASD,WAVA;AATH;AAPF,OADF;AA+BD;;;EA9CkBC,gB;;AAAfX,M,CACGY,S,GAAY;AACjBX,WAASY,oBAAUC,GAAV,CAAcC,UADN;AAEjBC,YAAUH,oBAAUI,IAFH;AAGjBC,SAAOL,oBAAUM,MAHA;AAIjBC,gBAAcP,oBAAUQ,SAAV,CAAoB,CAACR,oBAAUS,MAAX,EAAmBT,oBAAUU,MAA7B,CAApB;AAJG,C;AADfvB,M,CAQGwB,Y,GAAe;AACpBN,SAAO,EAAEO,UAAU,GAAZ;AADa,C;kBAyCTzB,M","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport 'antd/lib/dropdown/style/css';\nimport AntSelect from 'antd/lib/select';\nimport 'antd/lib/select/style/index.css';\nimport '../styles/override.scss';\nimport styled from 'styled-components';\nimport StringToHTML from '../StringToHTML';\n\nconst Option = AntSelect.Option;\n\nconst MtWrapper = styled.div`\n  display: inline-block;\n`;\n\nclass Select extends Component {\n  static propTypes = {\n    options: PropTypes.any.isRequired,\n    onChange: PropTypes.func,\n    style: PropTypes.object,\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  };\n\n  static defaultProps = {\n    style: { minWidth: 125 }\n  };\n\n  render() {\n    let { options } = this.props;\n\n    return (\n      <MtWrapper\n        innerRef={el => {\n          if (el) {\n            this.selectDropdownRef = el;\n          }\n        }}\n      >\n        <AntSelect\n          {...this.props}\n          onClick={event => {\n            event.stopPropagation();\n          }}\n          getPopupContainer={() => {\n            return this.selectDropdownRef;\n          }}\n        >\n          {options.map(option => {\n            return (\n              <Option key={option.key} value={option.key}>\n                {typeof option.content === 'string' ? (\n                  <StringToHTML content={option.content} />\n                ) : (\n                  option.content\n                )}\n              </Option>\n            );\n          })}\n        </AntSelect>\n      </MtWrapper>\n    );\n  }\n}\n\nexport default Select;\n"]}