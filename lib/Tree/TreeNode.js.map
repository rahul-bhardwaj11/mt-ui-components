{"version":3,"sources":["../../src/Tree/TreeNode.js"],"names":["TreeNode","props","children","listIndex","swapFrom","swapLength","swapDepth","scaffoldBlockPxWidth","lowerSiblingCounts","connectDropTarget","isOver","draggedNode","canDrop","treeIndex","treeId","getPrevRow","node","path","rowDirection","className","otherProps","rowDirectionClass","scaffoldBlockCount","length","scaffold","forEach","lowerSiblingCount","i","lineClass","push","width","highlightLineClass","style","right","left","map","child","defaultProps","propTypes","number","isRequired","string","arrayOf","func","bool","shape","oneOfType"],"mappings":"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","file":"TreeNode.js","sourcesContent":["/*eslint-disable*/\nimport React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './tree-node.css';\n\nclass TreeNode extends Component {\n  render() {\n    const {\n      children,\n      listIndex,\n      swapFrom,\n      swapLength,\n      swapDepth,\n      scaffoldBlockPxWidth,\n      lowerSiblingCounts,\n      connectDropTarget,\n      isOver,\n      draggedNode,\n      canDrop,\n      treeIndex,\n      treeId, // Delete from otherProps\n      getPrevRow, // Delete from otherProps\n      node, // Delete from otherProps\n      path, // Delete from otherProps\n      rowDirection,\n      className,\n      ...otherProps\n    } = this.props;\n\n    const rowDirectionClass = rowDirection === 'rtl' ? 'rst__rtl' : null;\n\n    // Construct the scaffold representing the structure of the tree\n    const scaffoldBlockCount = lowerSiblingCounts.length;\n    const scaffold = [];\n    lowerSiblingCounts.forEach((lowerSiblingCount, i) => {\n      let lineClass = '';\n      if (lowerSiblingCount > 0) {\n        // At this level in the tree, the nodes had sibling nodes further down\n\n        if (listIndex === 0) {\n          // Top-left corner of the tree\n          // +-----+\n          // |     |\n          // |  +--+\n          // |  |  |\n          // +--+--+\n          lineClass =\n            'rst__lineHalfHorizontalRight rst__lineHalfVerticalBottom';\n        } else if (i === scaffoldBlockCount - 1) {\n          // Last scaffold block in the row, right before the row content\n          // +--+--+\n          // |  |  |\n          // |  +--+\n          // |  |  |\n          // +--+--+\n          lineClass = 'rst__lineHalfHorizontalRight rst__lineFullVertical';\n        } else {\n          // Simply connecting the line extending down to the next sibling on this level\n          // +--+--+\n          // |  |  |\n          // |  |  |\n          // |  |  |\n          // +--+--+\n          lineClass = 'rst__lineFullVertical';\n        }\n      } else if (listIndex === 0) {\n        // Top-left corner of the tree, but has no siblings\n        // +-----+\n        // |     |\n        // |  +--+\n        // |     |\n        // +-----+\n        lineClass = 'rst__lineHalfHorizontalRight';\n      } else if (i === scaffoldBlockCount - 1) {\n        // The last or only node in this level of the tree\n        // +--+--+\n        // |  |  |\n        // |  +--+\n        // |     |\n        // +-----+\n        lineClass = 'rst__lineHalfVerticalTop rst__lineHalfHorizontalRight';\n      }\n\n      scaffold.push(\n        <div\n          key={`pre_${1 + i}`}\n          style={{ width: scaffoldBlockPxWidth }}\n          className={classnames('rst__lineBlock', lineClass, rowDirectionClass)}\n        />\n      );\n\n      if (treeIndex !== listIndex && i === swapDepth) {\n        // This row has been shifted, and is at the depth of\n        // the line pointing to the new destination\n        let highlightLineClass = '';\n\n        if (listIndex === swapFrom + swapLength - 1) {\n          // This block is on the bottom (target) line\n          // This block points at the target block (where the row will go when released)\n          highlightLineClass = 'rst__highlightBottomLeftCorner';\n        } else if (treeIndex === swapFrom) {\n          // This block is on the top (source) line\n          highlightLineClass = 'rst__highlightTopLeftCorner';\n        } else {\n          // This block is between the bottom and top\n          highlightLineClass = 'rst__highlightLineVertical';\n        }\n\n        let style;\n        if (rowDirection === 'rtl') {\n          style = {\n            width: scaffoldBlockPxWidth,\n            right: scaffoldBlockPxWidth * i\n          };\n        } else {\n          // Default ltr\n          style = {\n            width: scaffoldBlockPxWidth,\n            left: scaffoldBlockPxWidth * i\n          };\n        }\n\n        scaffold.push(\n          <div\n            // eslint-disable-next-line react/no-array-index-key\n            key={i}\n            style={style}\n            className={classnames(\n              'rst__absoluteLineBlock',\n              highlightLineClass,\n              rowDirectionClass\n            )}\n          />\n        );\n      }\n    });\n\n    let style;\n    if (rowDirection === 'rtl') {\n      style = { right: scaffoldBlockPxWidth * scaffoldBlockCount };\n    } else {\n      // Default ltr\n      style = { left: scaffoldBlockPxWidth * scaffoldBlockCount };\n    }\n\n    return connectDropTarget(\n      <div\n        {...otherProps}\n        className={classnames('rst__node', rowDirectionClass, className)}\n      >\n        {scaffold}\n\n        <div className=\"rst__nodeContent\" style={style}>\n          {Children.map(children, child =>\n            cloneElement(child, {\n              isOver,\n              canDrop,\n              draggedNode\n            })\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nTreeNode.defaultProps = {\n  swapFrom: null,\n  swapDepth: null,\n  swapLength: null,\n  canDrop: false,\n  draggedNode: null,\n  rowDirection: 'ltr'\n};\n\nTreeNode.propTypes = {\n  treeIndex: PropTypes.number.isRequired,\n  treeId: PropTypes.string.isRequired,\n  swapFrom: PropTypes.number,\n  swapDepth: PropTypes.number,\n  swapLength: PropTypes.number,\n  scaffoldBlockPxWidth: PropTypes.number.isRequired,\n  lowerSiblingCounts: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n  listIndex: PropTypes.number.isRequired,\n  children: PropTypes.node.isRequired,\n\n  // Drop target\n  connectDropTarget: PropTypes.func.isRequired,\n  isOver: PropTypes.bool.isRequired,\n  canDrop: PropTypes.bool,\n  draggedNode: PropTypes.shape({}),\n\n  // used in dndManager\n  getPrevRow: PropTypes.func.isRequired,\n  node: PropTypes.shape({}).isRequired,\n  path: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ).isRequired,\n\n  // rtl support\n  rowDirection: PropTypes.string,\n  className: PropTypes.string\n};\n\nexport default TreeNode;\n"]}