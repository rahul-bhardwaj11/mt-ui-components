{"version":3,"sources":["../../src/Tree/node-renderer-default.js"],"names":["isDescendant","older","younger","children","some","child","NodeRendererDefault","props","scaffoldBlockPxWidth","toggleChildrenVisibility","connectDragPreview","connectDragSource","isDragging","canDrop","canDrag","node","title","subtitle","draggedNode","path","treeIndex","isSearchMatch","isSearchFocus","buttons","className","style","didDrop","treeId","isOver","parentNode","rowDirection","otherProps","nodeTitle","nodeSubtitle","rowDirectionClass","handle","expanded","Array","map","_","index","dropEffect","isDraggedDescendant","isLandingPadActive","buttonStyle","left","right","height","length","width","opacity","btn","Component","defaultProps","propTypes","PropTypes","shape","isRequired","oneOfType","func","arrayOf","string","number","bool"],"mappings":"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","file":"node-renderer-default.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './node-renderer-default.css';\n\nfunction isDescendant(older, younger) {\n  return (\n    !!older.children &&\n    typeof older.children !== 'function' &&\n    older.children.some(\n      child => child === younger || isDescendant(child, younger)\n    )\n  );\n}\n\nclass NodeRendererDefault extends Component {\n  render() {\n    const {\n      scaffoldBlockPxWidth,\n      toggleChildrenVisibility,\n      connectDragPreview,\n      connectDragSource,\n      isDragging,\n      canDrop,\n      canDrag,\n      node,\n      title,\n      subtitle,\n      draggedNode,\n      path,\n      treeIndex,\n      isSearchMatch,\n      isSearchFocus,\n      buttons,\n      className,\n      style,\n      didDrop,\n      treeId,\n      isOver, // Not needed, but preserved for other renderers\n      parentNode, // Needed for dndManager\n      rowDirection,\n      ...otherProps\n    } = this.props;\n    const nodeTitle = title || node.title;\n    const nodeSubtitle = subtitle || node.subtitle;\n    const rowDirectionClass = rowDirection === 'rtl' ? 'rst__rtl' : null;\n\n    let handle;\n    if (canDrag) {\n      if (typeof node.children === 'function' && node.expanded) {\n        // Show a loading symbol on the handle when the children are expanded\n        //  and yet still defined by a function (a callback to fetch the children)\n        handle = (\n          <div className=\"rst__loadingHandle\">\n            <div className=\"rst__loadingCircle\">\n              {[...new Array(12)].map((_, index) => (\n                <div\n                  // eslint-disable-next-line react/no-array-index-key\n                  key={index}\n                  className={classnames(\n                    'rst__loadingCirclePoint',\n                    rowDirectionClass\n                  )}\n                />\n              ))}\n            </div>\n          </div>\n        );\n      } else {\n        // Show the handle used to initiate a drag-and-drop\n        handle = connectDragSource(<div className=\"rst__moveHandle\" />, {\n          dropEffect: 'copy',\n        });\n      }\n    }\n\n    const isDraggedDescendant = draggedNode && isDescendant(draggedNode, node);\n    const isLandingPadActive = !didDrop && isDragging;\n\n    let buttonStyle = { left: -0.5 * scaffoldBlockPxWidth };\n    if (rowDirection === 'rtl') {\n      buttonStyle = { right: -0.5 * scaffoldBlockPxWidth };\n    }\n\n    return (\n      <div style={{ height: '100%' }} {...otherProps}>\n        {toggleChildrenVisibility &&\n          node.children &&\n          (node.children.length > 0 || typeof node.children === 'function') && (\n            <div>\n              <button\n                type=\"button\"\n                aria-label={node.expanded ? 'Collapse' : 'Expand'}\n                className={classnames(\n                  node.expanded ? 'rst__collapseButton' : 'rst__expandButton',\n                  rowDirectionClass\n                )}\n                style={buttonStyle}\n                onClick={() =>\n                  toggleChildrenVisibility({\n                    node,\n                    path,\n                    treeIndex,\n                  })\n                }\n              />\n\n              {node.expanded &&\n                !isDragging && (\n                  <div\n                    style={{ width: scaffoldBlockPxWidth }}\n                    className={classnames(\n                      'rst__lineChildren',\n                      rowDirectionClass\n                    )}\n                  />\n                )}\n            </div>\n          )}\n\n        <div className={classnames('rst__rowWrapper', rowDirectionClass)}>\n          {/* Set the row preview to be used during drag and drop */}\n          {connectDragPreview(\n            <div\n              className={classnames(\n                'rst__row',\n                isLandingPadActive && 'rst__rowLandingPad',\n                isLandingPadActive && !canDrop && 'rst__rowCancelPad',\n                isSearchMatch && 'rst__rowSearchMatch',\n                isSearchFocus && 'rst__rowSearchFocus',\n                rowDirectionClass,\n                className\n              )}\n              style={{\n                opacity: isDraggedDescendant ? 0.5 : 1,\n                ...style,\n              }}\n            >\n              {handle}\n\n              <div\n                className={classnames(\n                  'rst__rowContents',\n                  !canDrag && 'rst__rowContentsDragDisabled',\n                  rowDirectionClass\n                )}\n              >\n                <div className={classnames('rst__rowLabel', rowDirectionClass)}>\n                  <span\n                    className={classnames(\n                      'rst__rowTitle',\n                      node.subtitle && 'rst__rowTitleWithSubtitle'\n                    )}\n                  >\n                    {typeof nodeTitle === 'function'\n                      ? nodeTitle({\n                          node,\n                          path,\n                          treeIndex,\n                        })\n                      : nodeTitle}\n                  </span>\n\n                  {nodeSubtitle && (\n                    <span className=\"rst__rowSubtitle\">\n                      {typeof nodeSubtitle === 'function'\n                        ? nodeSubtitle({\n                            node,\n                            path,\n                            treeIndex,\n                          })\n                        : nodeSubtitle}\n                    </span>\n                  )}\n                </div>\n\n                <div className=\"rst__rowToolbar\">\n                  {buttons.map((btn, index) => (\n                    <div\n                      key={index} // eslint-disable-line react/no-array-index-key\n                      className=\"rst__toolbarButton\"\n                    >\n                      {btn}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nNodeRendererDefault.defaultProps = {\n  isSearchMatch: false,\n  isSearchFocus: false,\n  canDrag: false,\n  toggleChildrenVisibility: null,\n  buttons: [],\n  className: '',\n  style: {},\n  parentNode: null,\n  draggedNode: null,\n  canDrop: false,\n  title: null,\n  subtitle: null,\n  rowDirection: 'ltr',\n};\n\nNodeRendererDefault.propTypes = {\n  node: PropTypes.shape({}).isRequired,\n  title: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  subtitle: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n  path: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  ).isRequired,\n  treeIndex: PropTypes.number.isRequired,\n  treeId: PropTypes.string.isRequired,\n  isSearchMatch: PropTypes.bool,\n  isSearchFocus: PropTypes.bool,\n  canDrag: PropTypes.bool,\n  scaffoldBlockPxWidth: PropTypes.number.isRequired,\n  toggleChildrenVisibility: PropTypes.func,\n  buttons: PropTypes.arrayOf(PropTypes.node),\n  className: PropTypes.string,\n  style: PropTypes.shape({}),\n\n  // Drag and drop API functions\n  // Drag source\n  connectDragPreview: PropTypes.func.isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n  parentNode: PropTypes.shape({}), // Needed for dndManager\n  isDragging: PropTypes.bool.isRequired,\n  didDrop: PropTypes.bool.isRequired,\n  draggedNode: PropTypes.shape({}),\n  // Drop target\n  isOver: PropTypes.bool.isRequired,\n  canDrop: PropTypes.bool,\n\n  // rtl support\n  rowDirection: PropTypes.string,\n};\n\nexport default NodeRendererDefault;\n"]}